This is a classical dynamic programming problem. The problem objective is to find the minimal number of coins to change the amount using given denomination.
#THE CODE GOES BELOW
class Solution(object):
    def coinChange(self, coins, amount):
        dp = [amount + 1] * (amount + 1)
        dp[0] = 0  # Base case: 0 coins are needed to make the amount 0
        for i in range(1, amount + 1):
            for coin in coins:
                if i - coin >= 0:  # Check if the coin can be used
                    dp[i] = min(dp[i], dp[i - coin] + 1)
        return dp[amount] if dp[amount] != amount + 1 else -1
if __name__ == "__main__":
    solution = Solution()
    coins = [1, 2, 5]
    amount = 11
    print(solution.coinChange(coins, amount)) 
