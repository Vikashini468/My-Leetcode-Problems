This is a Array Based problem of finding the triplet number that equals to 0. I have used the two pointer technique to reduce the time complexity from
O(n^3) to O(n^2)
#THE CODE GOES BELOW:
class Solution:
    def threeSum(self, nums):
        nums.sort()
        triplets = []

        for i in range(len(nums)):
            # Skip duplicate elements to avoid duplicate triplets
            if i > 0 and nums[i] == nums[i - 1]:
                continue

            # Define two pointers: left and right
            left, right = i + 1, len(nums) - 1

            while left < right:
                current_sum = nums[i] + nums[left] + nums[right]

                if current_sum == 0:
                    triplets.append([nums[i], nums[left], nums[right]])
                    # Move pointers and skip duplicates
                    while left < right and nums[left] == nums[left + 1]:
                        left += 1
                    while left < right and nums[right] == nums[right - 1]:
                        right -= 1
                    left += 1
                    right -= 1
                elif current_sum < 0:
                    left += 1
                else:
                    right -= 1

        return triplets
